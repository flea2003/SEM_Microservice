openapi: 3.0.3
info:
  title: "Users Microservice"
  description: "The YAML API specification of the users microservice"
  version: 1.0.0

tags:
  - name: Admin Operations
    description: These are features that can only be accessed by admins
  - name: Author Operations
    description: These are features that can only be accessed by authors
  - name: User Operations
    description: These contain endpoints for any type of user

paths:
  /admin/addBook:
    post:
      summary: "Adds a book to the book repository"
      tags:
        - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully"
        '401':
          description: "User does not have admin privileges"
        '500':
          description: "Book could not be added"
  /admin/editBook:
    put:
      summary: "Edits a book from the book repository"
      tags:
        - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book edits saved successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be edited"
  /admin/removeBook/{bookID}:
    delete:
      summary: "Removes a book from the book repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: bookID
          schema:
            type: integer
          required: true
          description: ID of the book to delete
      responses:
        '200':
          description: "Book removed successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be removed"
  /admin/deleteUser/{userID}:
    delete:
      summary: "Deletes the account of an user from the user repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '200':
          description: "User deleted successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be deleted"
  /admin/banUser:
    post:
      summary: "Bans the account of an user"
      tags:
        - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User banned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"
  /admin/unbanUser:
    post:
      summary: "Unbans the account of an user"
      tags:
        - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User unbanned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"
  /author/addBookToCollection:
    post:
      summary: "Adds his own book to the book repository"
      tags:
        - Author Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully to the repository"
        '401':
          description: "User does not have the author privileges"
        '404':
          description: "Book could not been found"
        '500':
          description: "Book could not be added to the repository"
  /user/followUser:
    put:
      summary: "Start following the desired user"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User followed successfully"
        '404':
          description: "User could not been found"
        '500':
          description: "User could not been followed"
  /user/unfollowUser:
    put:
      summary: "Stop following the desired user"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User unfollowed successfully"
        '404':
          description: "User could not been found"
        '500':
          description: "User could not been unfollowed"
  /user/editUser:
    put:
      summary: "Edit the user's details"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      responses:
        '200':
          description: "User details updated successfully"
        '401':
          description: "Unauthorised changes to the user"
        '404':
          description: "User could not be found"
        '500':
          description: "User could not be updated or new data is invalid"
  /user/changePassword:
    put:
      summary: "Change user password"
      tags:
        - User Operations
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: "Password changed successfully"
        '401':
          description: "User not logged in"
        '500':
          description: "Password could not be changed"
  /user/updateAccountSettings:
    put:
      summary: "Enable two-factor authentication for an user"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSettings"
        required: true
      responses:
        '200':
          description: "Two factor authentication is now enabled"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "Two factor authentication could not be enabled"
  /user:
    delete:
      summary: "User wants to delete their account by own choice."
      tags:
        - User Operations
      responses:
        '200':
          description: "User account deletion successful"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "User account could not be deleted"
  /user/deactivate:
    put:
      summary: "User wants to deactivate their account by own choice. Set their status as 'deactivated'."
      tags:
        - User Operations
      responses:
        '200':
          description: "User account deactivation successful"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "User account could not be deactivated"
  /user/search/name:
    get:
      summary: "Search another user by name"
      tags:
        - User Operations
      parameters:
        - name: name
          in: query
          description: "The name to search for"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/search/interests:
    get:
      summary: "Search another user by interests"
      tags:
        - User Operations
      parameters:
        - name: interests
          in: query
          description: "The interests to search for."
          required: true
          schema:
            type: "array"
            items:
              type: string
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/search/favoriteBooks:
    post:
      summary: "Search another user by favorite books"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                favoriteBooks:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Book"
              required:
                - favoriteBooks
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/search/connections:
    post:
      summary: "Search another user by connections"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                connections:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/User"
              required:
                - connections
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/updatePicture:
    put:
      summary: "Update profile picture"
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
                profilePicture:
                  type: string  # encoded in base64
              required:
                - user
                - profilePicture
      responses:
        '200':
          description: "Profile picture updated successfully"
        '400':
          description: "Profile picture not in the right format"
        '500':
          description: "Profile picture could not be updated"

components:
  schemas:
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
        authorName:
          type: "string"
        bookName:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        details:
          $ref: "#/components/schemas/UserDetails"
        settings:
          $ref: "#/components/schemas/AccountSettings"
    UserDetails:
      type: "object"
      properties:
        name:
          type: "string"
        bio:
          type: "string"
        location:
          type: "string"
        favouriteGenres:
          type: "array"
          items:
            type: "string"
        favouriteBook:
          type: "string"
    AccountSettings:
      type: "object"
      properties:
        privacy_pref:
          type: "string"
        notification_settings:
          type: "string"
        enable2FA:
          type: boolean
        deactivated:
          type: boolean