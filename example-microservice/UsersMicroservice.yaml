openapi: 3.0.3
info:
  title: "Users Microservice"
  description: "The YAML API specification of the users microservice"
  version: 1.0.0
servers:
  - url: 'http://localhost:8082'
paths:
  /user:
    post:
      summary: Creates a new user and logs them in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: User was created and logged in successfully
          headers:
            Authorization:
              schema:
                type: string
              description: Session token
        '400':
          description: Request body is malformed
        '409':
          description: User with username/email already exists
        '500':
          description: Internal registration failure
    get:
      summary: Fetch user information
      responses:
        '200':
          description: User data fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: User is not authenticated
        '500':
          description: Internal server error

  /login:
    post:
      summary: Authenticates a user and returns a session token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: User logged in successfully
          headers:
            Authorization:
              schema:
                type: string
              description: Session token
        '400':
          description: Request body is malformed
        '401':
          description: Invalid username or password
        '500':
          description: Internal login failure

  /user/makeAdmin:
    post:
      summary: Converts a user account to an admin account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                adminPassword:
                  type: string
        required: true
      responses:
        '200':
          description: User successfully converted to admin
        '400':
          description: Request body is malformed
        '401':
          description: Invalid admin password
        '409':
          description: User is already an admin
        '500':
          description: Internal failure
  /user/makeAuthor:
    post:
      summary: summary Converts a user account to an author account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentID:
                  type: integer
        required: true
      responses:
        '200':
          description: User successfully converted to author
        '400':
          description: Request body is malformed
        '401':
          description: Cannot verify author identity
        '409':
          description: User is already an author
        '500':
          description: Internal failure

  /admin/addBook:
    post:
      summary: "Adds a book to the book repository"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully"
        '401':
          description: "User does not have admin privileges"
        '500':
          description: "Book could not be added"
  /admin/editBook:
    post:
      summary: "Edits a book from the book repository"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book edits saved successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be edited"
  /admin/removeBook:
    post:
      summary: "Removes a book from the book repository"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book removed successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be removed"
  /admin/deleteUser:
    post:
      summary: "Deletes the account of an user from the user repository"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User deleted successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be deleted"
  /admin/banUser:
    post:
      summary: "Bans the account of an user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User banned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"
  /admin/unbanUser:
    post:
      summary: "Unbans the account of an user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User unbanned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"

components:
  schemas:
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
        authorName:
          type: "string"
        bookName:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
        email:
          type: "string"
