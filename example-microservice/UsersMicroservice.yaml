openapi: 3.0.3
info:
  title: "Users Microservice"
  description: "The YAML API specification of the users microservice"
  version: 1.0.0

tags:
  - name: Admin Operations
    description: These are features that can only be accessed by admins
  - name: Author Operations
    description: These are features that can only be accessed by authors
  - name: User Operations
    description: These contain endpoints for any type of user
  - name: Analytics
    description: These contain endpoints for generating analytics
paths:
  /user:
    post:
      summary: Creates a new user and logs them in
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: User was created and logged in successfully
          headers:
            Authorization:
              schema:
                type: integer
              description: User ID of logged in user
        '400':
          description: Request body is malformed
        '409':
          description: User with username/email already exists
        '500':
          description: Internal registration failure
  /login:
    post:
      summary: Authenticates a user and returns the user
      tags:
        - User Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: User logged in successfully
          headers:
            Authorization:
              schema:
                type: integer
              description: User ID of logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Request body is malformed
        '401':
          description: Invalid username or password
        '500':
          description: Internal login failure

  /user/{userID}/makeAdmin:
    post:
      summary: Converts a user account to an admin account
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              description: Admin password
        required: true
      responses:
        '200':
          description: User successfully converted to admin
        '400':
          description: Request body is malformed
        '401':
          description: Invalid admin password
        '409':
          description: User is already an admin
        '500':
          description: Internal failure
  /user/{userID}/makeAuthor:
    post:
      summary: Converts a user account to an author account
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentID:
                  type: integer
        required: true
      responses:
        '200':
          description: User successfully converted to author
        '400':
          description: Request body is malformed
        '401':
          description: Cannot verify author identity
        '409':
          description: User is already an author
        '500':
          description: Internal failure

  /admin/{adminID}/addBook:
    post:
      summary: "Adds a book to the book repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully"
        '401':
          description: "User does not have admin privileges"
        '500':
          description: "Book could not be added"
  /admin/{adminID}/editBook/{bookID}:
    put:
      summary: "Edits a book from the book repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
        - in: path
          name: bookID
          schema:
            type: integer
          required: true
          description: ID of the book to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book edits saved successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be edited"
  /admin/{adminID}/removeBook/{bookID}:
    delete:
      summary: "Removes a book from the book repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
        - in: path
          name: bookID
          schema:
            type: integer
          required: true
          description: ID of the book to delete
      responses:
        '200':
          description: "Book removed successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "Book could not be found"
        '500':
          description: "Book could not be removed"
  /admin/{adminID}/deleteUser/{userID}:
    delete:
      summary: "Deletes the account of an user from the user repository"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '200':
          description: "User deleted successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be deleted"
  /admin/{adminID}/banUser/{userID}:
    post:
      summary: "Bans the account of an user"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to ban
      responses:
        '200':
          description: "User banned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"
  /admin/{adminID}/unbanUser/{userID}:
    post:
      summary: "Unbans the account of an user"
      tags:
        - Admin Operations
      parameters:
        - in: path
          name: adminID
          schema:
            type: integer
          required: true
          description: Numeric ID of the admin that makes the request
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to unban
      responses:
        '200':
          description: "User unbanned successfully"
        '401':
          description: "User does not have admin privileges"
        '404':
          description: "User could not be found"
        '500':
          description: "User account could not be modified"
  /author/{authorID}/addBookToCollection:
    post:
      summary: "Adds his own book to the book repository"
      tags:
        - Author Operations
      parameters:
        - in: path
          name: authorID
          schema:
            type: integer
          required: true
          description: Numeric ID of the author that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully to the repository"
        '401':
          description: "User does not have the author privileges"
        '404':
          description: "Book could not been found"
        '500':
          description: "Book could not be added to the repository"
  /user/{userID}/followUser:
    put:
      summary: "Start following the desired user"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User followed successfully"
        '404':
          description: "User could not been found"
        '500':
          description: "User could not been followed"
  /user/{userID}/unfollowUser:
    put:
      summary: "Stop following the desired user"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: "User unfollowed successfully"
        '404':
          description: "User could not been found"
        '500':
          description: "User could not been unfollowed"
  /user/{userID}/editUser:
    put:
      summary: "Edit the user's details"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      responses:
        '200':
          description: "User details updated successfully"
        '401':
          description: "Unauthorised changes to the user"
        '404':
          description: "User could not be found"
        '500':
          description: "User could not be updated or new data is invalid"
  /user/{userID}/changePassword:
    put:
      summary: "Change user password"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: "Password changed successfully"
        '401':
          description: "User not logged in"
        '500':
          description: "Password could not be changed"
  /user/{userID}/updateAccountSettings:
    put:
      summary: "Update the account settings for the logged in user"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSettings"
        required: true
      responses:
        '200':
          description: "Account settings changed successfully"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "Account settings could not be changed"
  /user/{userID}/deactivate:
    put:
      summary: "User wants to deactivate their account by own choice. Set their status as 'deactivated'."
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      responses:
        '200':
          description: "User account deactivation successful"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "User account could not be deactivated"
  /user/{userID}/search/name:
    get:
      summary: "Search another user by name"
      tags:
        - User Operations
      parameters:
        - name: name
          in: query
          description: "The name to search for"
          required: true
          schema:
            type: string
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/{userID}/search/interests:
    get:
      summary: "Search another user by interests"
      tags:
        - User Operations
      parameters:
        - name: interests
          in: query
          description: "The interests to search for."
          required: true
          schema:
            type: "array"
            items:
              type: string
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/{userID}/search/favoriteBooks:
    post:
      summary: "Search another user by favorite books"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                favoriteBooks:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Book"
              required:
                - favoriteBooks
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/{userID}/search/connections:
    post:
      summary: "Search another user by connections"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                connections:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/User"
              required:
                - connections
      responses:
        '200':
          description: "Users returned successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '404':
          description: "404 Not Found"
        '500':
          description: "Information couldn't be fetched"
  /user/{userID}:
    get:
      summary: Fetch user information
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      responses:
        '200':
          description: User data fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: User is not authenticated
        '500':
          description: Internal server error
    delete:
      summary: "User wants to delete their account by own choice."
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      responses:
        '200':
          description: "User account deletion successful"
        '401':
          description: "User not logged in"
        '404':
          description: "User not found"
        '500':
          description: "User account could not be deleted"
  /user/{userID}/updatePicture:
    put:
      summary: "Update profile picture"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
                profilePicture:
                  type: string  # encoded in base64
              required:
                - user
                - profilePicture
      responses:
        '200':
          description: "Profile picture updated successfully"
        '400':
          description: "Profile picture not in the right format"
        '500':
          description: "Profile picture could not be updated"
  /analytics:
    get:
      summary: "Retrieves the generated analytics"
      tags:
        - Analytics
      responses:
        '200':
          description: "Analytics generated successfully"
          content:
            application/json:
              schema:
                type: "string"
        '500':
          description: "Analytics generation failed"
  /user/{userID}/addBookToBookshelf/{bookshelfID}:
    post:
      summary: "Adds a book to the user's bookshelf"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
        - in: path
          name: bookshelfID
          schema:
            type: integer
          required: true
          description: ID of the bookshelf to add the book to
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        '200':
          description: "Book added successfully"
        '401':
          description: "User is not logged in"
        '500':
          description: "Book addition failed"
  /user/{userID}/addReview/{bookID}:
    post:
      summary: "Adds a review to a book"
      tags:
        - User Operations
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user that makes the request
        - in: path
          name: bookID
          schema:
            type: integer
          required: true
          description: ID of the book to review
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: "Review added successfully"
        '401':
          description: "User is not logged in"
        '500':
          description: "Review addition failed"

components:
  schemas:
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
        authorName:
          type: "string"
        bookName:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        userDetailsID:
          type: "integer" #Links to User Details
        accountSettingsID:
          type: "integer" #Links to Account settings
        isAdmin:
          type: "boolean"
        isAuthor:
          type: "boolean"
    UserDetails:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        bio:
          type: "string"
        location:
          type: "string"
        following:
          type: array
          items:
            $ref: "#/components/schemas/User"
        favouriteBookID:
          type: "integer" #Links to a book
        favouriteGenres:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
    AccountSettings:
      type: "object"
      properties:
        id:
          type: "integer"
        privacy_pref:
          type: "string"
        notification_settings:
          type: "string"
        enable2FA:
          type: boolean
        deactivated:
          type: boolean
    Genre:
      type: "object"
      properties:
        Id:
          type: "integer"
        genre:
          type: "string"
